@page "/item"
@page "/item/{id:int}"
@inject IItemService ItemService

@if(Id == null)
{
    <PageTitle>Create a new Item</PageTitle>
    <h3>Create a new Item</h3>
}
else
{
    <PageTitle>@item.Title</PageTitle>
    <h3>@item.Title</h3>
}

<EditForm Model="item" OnSubmit="HandleSubmit">
     <div>
        <label>Category</label><br/>
        <InputSelect @bind-Value="item.CategoryId" class="form-select">
            @foreach (var category in ItemService.Categories)
           {
               <option value="@category.Id">@category.Title</option>
           }
        </InputSelect>
    </div>

    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="item.Title" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="item.Description" class="form-control"></InputText>
    </div>
    <div>
        <label for="quantity">Quantity</label>
        <input id="quantity" @bind="item.Quantity" class="form-control" />
    </div>
    
    <div>
        <label>Unit</label><br/>
        <InputSelect @bind-Value="item.UnitId" class="form-select">
            @foreach (var unit in ItemService.Units)
           {
               <option value="@unit.Id">@unit.Type</option>
           }
        </InputSelect>
    </div>
    <div>
        <label for="amount">Amount</label>
        <input id="amount" @bind="item.Ammount" class="form-control" />
    </div>
    <div>
        <label for="sellingPrice">Selling Price</label>
        <input id="sellingPrice" @bind="item.SellingPrice" class="form-control" />
    </div>
   
    
    <button type="submit" class="btn btn-outline-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteItem">Delete</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Item item = new Item { Category = new Category(), Unit = new Unit()};

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Update";
        await ItemService.GetCategories();
        await ItemService.GetUnits();
        await ItemService.GetCategoryGroups();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id == null)
        {
            item.Category = ItemService.Categories[0];
            item.CategoryId = item.Category.Id;

            item.Unit = ItemService.Units[0];
            item.UnitId = item.Unit.Id;
        }
        else
        {
            item = await ItemService.GetSingleItem((int)Id);
        }
    }
    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await ItemService.CreateItem(item);
        }
        else
        {
            await ItemService.UpdateItem(item);
        }
    }
    async Task DeleteItem()
    {
        await ItemService.DeleteItem(item.Id);
    }
}
