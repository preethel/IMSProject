@page "/measurementunit"
@page "/measurementunit/{id:int}"
@inject IUnitService UnitService

@if(Id == null)
{
    <PageTitle>Create a new Unit</PageTitle>
    <h3>Create a new Unit</h3>
}
else
{
    <PageTitle>@unit.Type</PageTitle>
    <h3>@unit.Type</h3>
}
<EditForm Model="unit" OnSubmit="HandleSubmit">
    <div>
        <label for="type">Type</label>
        <InputText id="type" @bind-Value="unit.Type" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="unit.Description" class="form-control"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteUnit" >Delete</button>
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    Unit unit= new Unit();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Update";
        await UnitService.GetUnits();
    }
    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            unit = await UnitService.GetUnitById((int)Id);
        }
    }
    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await UnitService.CreateUnit(unit);
        }
        else
        {
            await UnitService.UpdateUnit(unit);
        }
    }
    async Task DeleteUnit()
    {
        await UnitService.DeleteUnit(unit.Id);
    }
}
