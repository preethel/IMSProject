@page "/category"
@page "/category/{id:int}"
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@if (Id == null)
{
    <PageTitle>Create a new Category</PageTitle>
    <h3>Create a new Category</h3>
}
else
{
    <PageTitle>@category.Title</PageTitle>
    <h3>Edit @category.Title</h3>
}

<EditForm Model="category" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="category.Title" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Decription</label>
        <InputText id="description" @bind-Value="category.Description" class="form-control"></InputText>
    </div>
    <div>
        <label>Category Group</label><br />
        <InputSelect @bind-Value="category.CategoryGroupId" class="form-select">
            @foreach (var cg in CategoryService.ClientCategoryGroups)
            {
                <option value="@cg.Id">@cg.Title</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <a class="btn btn-primary" @onclick="GoBack">Back</a>
    @*<button type="button" class="btn btn-primary" onclick="GoBack">Back</button>*@
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Category category = new Category { CategoryGroup = new CategoryGroup() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Update";
        await CategoryService.GetCategoryGroups();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            category.CategoryGroup = CategoryService.ClientCategoryGroups[0];
            category.CategoryGroupId = category.CategoryGroup.Id;
        }
        else
        {
            category = await CategoryService.GetCategoryById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await CategoryService.CreateCategory(category);
        }
        else
        {
            await CategoryService.UpdateCategory(category);
        }
    }
    void GoBack()
    {
        NavigationManager.NavigateTo("/categories");
    }
    //async Task DeleteCategory()
    //{
    //    await CategoryService.DeleteCategory(category.Id);
    //}
}