@page "/coa"
@page "/coa/{id:int}"
@inject ICOAService COAService
@inject NavigationManager NavigationManager
@if(Id == null)
{
    <PageTitle>Create a New Chart of Account</PageTitle>
    <h3>Create a New Chart of Account</h3>
}
else
{
    <PageTitle>@coa.Name</PageTitle>
    <h3>@coa.Name</h3>
}
<EditForm Model="coa" OnSubmit="HandleSubmit">
    <div>
        <label for="type">Account Name</label>
        <InputText id="type" @bind-Value="coa.Type" class="form-control"></InputText>
    </div>
    <div>
        <label>Account Type</label><br/>
        <InputSelect @bind-Value="coa.Name" class="form-select">
            <option value="Asset">Asset</option>
            <option value="Liabilities">Liabilities</option>
            <option value="COGS">COGS</option>
            <option value="Income">Income</option>
            <option value="Expenses">Expenses</option>
            <option value="Equity">Equity</option>
        </InputSelect>
    </div>
    <br />


    <button type="submit" class="btn btn-primary">@btnText</button>
    <a class="btn btn-primary" @onclick="GoBack">Back</a>
    
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
        IMSProject.Shared.ChartOfAccount coa = new IMSProject.Shared.ChartOfAccount();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Update";
        await COAService.GetCOA();
    }
    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            coa = await COAService.GetCOAById((int)Id);
        }
    }
    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await COAService.CreateCOA(coa);
        }
        else
        {
            await COAService.UpdateCOA(coa);
        }
    }
    void GoBack()
    {
        NavigationManager.NavigateTo("/coas");
    }
    //async Task DeleteUnit()
    //{
    //    await UnitService.DeleteUnit(unit.Id);
    //}
}
